#
#--------------------------------------------------------------------------
# Image Setup
#--------------------------------------------------------------------------
#
# To edit the 'php-fpm' base Image, visit its repository on Github
#    https://github.com/LaraDock/php-fpm
#
# To change its version, see the available Tags on the Docker Hub:
#    https://hub.docker.com/r/laradock/php-fpm/tags/
#

FROM laradock/php-fpm:7.1--1.3

MAINTAINER Mahmoud Zalt <mahmoud@zalt.me>

ARG DEBIAN_FRONTED=noninteractive

RUN apt-get update && \
  apt-get install apt-utils git -y && \
  apt-get dist-upgrade -y
#
#--------------------------------------------------------------------------
# Mandatory Software's Installation
#--------------------------------------------------------------------------
#
# Mandatory Software's such as ("mcrypt", "pdo_mysql", "libssl-dev", ....)
# are installed on the base image 'laradock/php-fpm' image. If you want
# to add more Software's or remove existing one, you need to edit the
# base image (https://github.com/LaraDock/php-fpm).
#

#
#--------------------------------------------------------------------------
# Optional Software's Installation
#--------------------------------------------------------------------------
#
# Optional Software's will only be installed if you set them to `true`
# in the `docker-compose.yml` before the build.
# Example:
#   - INSTALL_ZIP_ARCHIVE=true
#   - ...
#

#####################################
# xDebug:
#####################################

ARG INSTALL_XDEBUG=false
COPY ./xdebug.ini /tmp/xdebug.ini
RUN if [ ${INSTALL_XDEBUG} = true ]; then \
    # Install the xdebug extension
    pecl install xdebug && \
    cp /tmp/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini && \
    docker-php-ext-enable xdebug \
;fi

#####################################
# MongoDB:
#####################################

ARG INSTALL_MONGO=false
COPY ./mongodb.ini /tmp/mongodb.ini
RUN if [ ${INSTALL_MONGO} = true ]; then \
    pecl install mongodb && \
    cp /tmp/mongodb.ini /usr/local/etc/php/conf.d/mongodb.ini && \
    docker-php-ext-enable mongodb \
;fi

#####################################
# ZipArchive:
#####################################

ARG INSTALL_ZIP_ARCHIVE=false
RUN if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then \
    # Install the zip extension
    pecl install zip-1.13.5 && \
    docker-php-ext-enable zip \
;fi

#####################################
# PHP Memcached:
#####################################

ARG INSTALL_MEMCACHED=false
RUN if [ ${INSTALL_MEMCACHED} = true ]; then \
    # Install the php memcached extension
    curl -k -L -o /tmp/memcached.tar.gz "https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz" \
    && mkdir -p memcached \
    && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \
    && ( \
        cd memcached \
        && phpize \
        && ./configure \
        && make -j$(nproc) \
        && make install \
    ) \
    && rm -r memcached \
    && rm /tmp/memcached.tar.gz \
    && docker-php-ext-enable memcached \
;fi

#####################################
# PHP Aerospike:
#####################################

ARG INSTALL_AEROSPIKE_EXTENSION=false
ENV INSTALL_AEROSPIKE_EXTENSION ${INSTALL_AEROSPIKE_EXTENSION}
COPY ./aerospike.ini /tmp/aerospike.ini
RUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = true ]; then \
    # Install the php aerospike extension
    curl -L -o /tmp/aerospike-client-php.tar.gz "https://github.com/luciano-jr/aerospike-client-php/archive/master.tar.gz" \
    && mkdir -p aerospike-client-php \
    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \
    && ( \
        cd aerospike-client-php/src/aerospike \
        && phpize \
        && ./build.sh \
        && make install \
    ) \
    && rm /tmp/aerospike-client-php.tar.gz \
## added from Kim
    && cp /tmp/aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini \
;fi

#####################################
# Opcache:
#####################################
ARG INSTALL_OPCACHE=false
COPY ./opcache.ini /tmp/opcache.ini
RUN if [ ${INSTALL_OPCACHE} = true ]; then \
    docker-php-ext-install opcache && \
    docker-php-ext-enable opcache && \
    cp /tmp/opcache.ini /usr/local/etc/php/conf.d/opcache.ini \
;fi

#####################################
# Codeigniter Modifications:
#####################################

ARG CODEIGNITER=false
RUN if [ ${CODEIGNITER} = true ]; then \
    # Install Codeigniter PHP extentions requirements
     docker-php-ext-install mysqli && \
     docker-php-ext-install tokenizer \
;fi

#####################################
# EXIF extension:
#####################################

RUN docker-php-ext-install exif
RUN docker-php-ext-enable exif

#####################################
# bz2 extension:
#####################################

RUN apt-get install -y libbz2-dev --no-install-recommends

RUN docker-php-ext-install bz2
RUN docker-php-ext-enable bz2

#####################################
# intl extension:
#####################################

RUN apt-get install -y libicu-dev

RUN docker-php-ext-install intl
RUN docker-php-ext-enable intl

#####################################
# bc math extension
#####################################

RUN docker-php-ext-install bcmath
RUN docker-php-ext-enable bcmath

#####################################
# GMP extension
#####################################

RUN apt-get install -y libgmp-dev \
  && ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h

RUN docker-php-ext-install gmp
RUN docker-php-ext-enable gmp

#####################################
# Opcache extension
#####################################

RUN docker-php-ext-install opcache

#####################################
# Redis extension
#####################################

RUN pecl install -o -f redis \
  && rm -rf /tmp/pear \
  && docker-php-ext-enable redis

#####################################
# Imagemagick extension:
#####################################

ARG INSTALL_IMAGEMAGICK_EXTENSION=false
RUN if [ ${INSTALL_IMAGEMAGICK_EXTENSION} = true ]; then \
  # apt-get install libmagickwand-dev -y --no-install-recommends \
  #
  # ==== official method (failed)
  #echo "deb-src http://deb.debian.org/debian jessie main" >> /etc/apt/sources.list && \
  #echo "deb-src http://deb.debian.org/debian jessie-updates main" >> /etc/apt/sources.list && \
  #echo "deb-src http://security.debian.org jessie/updates main" >> /etc/apt/sources.list && \
  #apt-get update && \
  #mkdir /tmp/imagemagick && \
  #cd /tmp/imagemagick && \
  #apt-get build-dep imagemagick -y && \
  #apt-get install libwebp-dev devscripts -y && \
  #apt-get install graphicsmagick-imagemagick-compat libgraphviz-dev libpng-dev libjpeg-dev fakeroot -y && \
  #apt-get source imagemagick && \
  #cd imagemagick-* && \
  #debuild -uc -us && \
  #dpkg -i ../*magick*.deb && \
  #apt-get autoremove -y && \
  #apt-get autoclean -y \
  # ==== from source ====
  echo "deb-src http://deb.debian.org/debian jessie main" >> /etc/apt/sources.list && \
  echo "deb-src http://deb.debian.org/debian jessie-updates main" >> /etc/apt/sources.list && \
  echo "deb-src http://security.debian.org jessie/updates main" >> /etc/apt/sources.list && \
  apt-get update && \
  apt-get build-dep imagemagick -y && \
  apt-get install libwebp-dev -y && \
  #mkdir /tmp/libwebp && \
  #cd /tmp/libwebp && \
  #curl -L -o libwebp.tar.gz http://downloads.webmproject.org/releases/webp/libwebp-0.6.0.tar.gz && \
  #tar xf libwebp*.tar.gz && \
  #cd libwebp* && \
  #./configure --prefix=/usr && \
  #make && \
  #make install && \
  mkdir /tmp/imagemagick && \
  cd /tmp/imagemagick && \
  curl -L -o ImageMagick.tar.gz http://www.imagemagick.org/download/ImageMagick.tar.gz && \
  tar xf ImageMagick*.tar.gz && \
  cd ImageMagic* && \
  ./configure --prefix=/usr --without-x && \
  make && \
  make install \
;fi

RUN pecl install imagick
RUN docker-php-ext-enable imagick

#####################################
# clean cache and downloaded files
#####################################

RUN apt-get clean && \
  apt-get remove --purge apt-utils git -y && \
  rm -rf /tmp/* /var/tmp/*


#
#--------------------------------------------------------------------------
# Final Touch
#--------------------------------------------------------------------------
#

#ADD ./laravel.ini /usr/local/etc/php/conf.d
#ADD ./laravel.pool.conf /usr/local/etc/php-fpm.d/

COPY ./laravel.ini /usr/local/etc/php/conf.d
COPY ./laravel.pool.conf /usr/local/etc/php-fpm.d/

RUN rm -r /var/lib/apt/lists/*

RUN usermod -u 1000 www-data

WORKDIR /var/www

CMD ["php-fpm"]

EXPOSE 9000
